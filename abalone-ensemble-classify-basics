{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":72489,"databundleVersionId":8096274,"sourceType":"competition"}],"dockerImageVersionId":30684,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/naiku007/abalone-models?scriptVersionId=172780094\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n        \nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-04-19T02:33:35.857276Z","iopub.execute_input":"2024-04-19T02:33:35.85766Z","iopub.status.idle":"2024-04-19T02:33:35.865544Z","shell.execute_reply.started":"2024-04-19T02:33:35.857634Z","shell.execute_reply":"2024-04-19T02:33:35.864456Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"/kaggle/input/playground-series-s4e4/sample_submission.csv\n/kaggle/input/playground-series-s4e4/train.csv\n/kaggle/input/playground-series-s4e4/test.csv\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Libraries","metadata":{}},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport sklearn\n\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\n\nfrom sklearn.ensemble import RandomForestRegressor, RandomForestClassifier\nimport xgboost as xgb\nfrom sklearn.linear_model import LinearRegression, LogisticRegression","metadata":{"execution":{"iopub.status.busy":"2024-04-19T02:33:35.868266Z","iopub.execute_input":"2024-04-19T02:33:35.868894Z","iopub.status.idle":"2024-04-19T02:33:35.87568Z","shell.execute_reply.started":"2024-04-19T02:33:35.868857Z","shell.execute_reply":"2024-04-19T02:33:35.874376Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"orig_df = pd.read_csv('/kaggle/input/playground-series-s4e4/train.csv',index_col='id')\norig_df","metadata":{"execution":{"iopub.status.busy":"2024-04-19T02:33:35.880528Z","iopub.execute_input":"2024-04-19T02:33:35.880937Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"TARGET = 'Rings'","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"orig_df['Sex'] = orig_df['Sex'].replace({'F':1, 'I':2, 'M':3})\norig_df","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"x = orig_df.drop([TARGET], axis=1)\ny = orig_df[[TARGET]]\nx","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"trainx, validx, trainy, validy = train_test_split(x, y, test_size=0.2, random_state=143)\nvalidx","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# Averaging - ensemble ","metadata":{}},{"cell_type":"code","source":"# initiating all the model objects with default parameters\n \n    \nmodel1 = LogisticRegression()\nmodel2 = xgb.XGBRFClassifier()\nmodel3 = RandomForestClassifier()\n\n# training all the models on the whole training dataset - independently\nmodel1.fit(trainx , trainy)\nmodel2.fit(trainx , trainy)\nmodel3.fit(trainx , trainy)\n\n\n# prediciting the output on the validation dataset\n\npred1 = model1.predict(validx)\npred2 = model2.predict(validx)\npred3 = model3.predict(validx)\n\n# final prediction after averaging on the prediction af all 3 models\npred_final_avg = (pred1 + pred2 + pred3) / 3.0\n","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(mean_squared_error(validy, pred_final_avg))","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}